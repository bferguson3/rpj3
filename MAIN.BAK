#include <stdio.h>
#include "rpj3\IBK.H"
#include <CONIO.H>
#include <IOSTREAM.H>
#include "rpj3\BENT.H"
//#include <STDLIB.H>
//#include <FSTREAM.H>
//#include <TIME.H>

#include "rpj3\rooms.h"

extern u16 SB_BASE;

#define CRTC_REG 0x3d4 
#define HZTOTAL_REG 0
#define CRTC_DATA 0x3d5
#define PAGE1_OFFSET (u16)(640*200)
#define BLANK_OFFSET (u16)(PAGE1_OFFSET*2)
// RAM
char ibk[3204];
char zp[0x10];
//
void movecursor(int x, int y);
void reset(void);
void cls(void);

u8 imgdata[100];
u8 last_kb_pressed;
unsigned const char ESC = 0x1b;
int fps = 60;
int _wait = 1000 / fps;
int frameskip = 0;

u8 input1;
u8 input1_last;
u8 framecounter = 0;

#define BUTTON_UP 1
#define BUTTON_DOWN 2
#define BUTTON_LEFT 4
#define BUTTON_RIGHT 8
#define BUTTON_A 16
#define BUTTON_B 32

// THE FOLLOWING THREE FUNCTIONS REQUIRE
// cout << flush; 
// AFTER UTILIZING THEM.
void reset()
{
    //Clears all break codes, sets text to default colors
    cout << ESC << "[0m";
}

void cls()
{
    //Fills entire screen with " " and positions cursor to top left.
    cout << ESC << "[2J";

}

void movecursor(int x, int y)
{
    if(y < 0)
    {
		cout << ESC << "[" << -y << "A";
    }
    else
    {
		cout << ESC << "[" << y << "B";
    }
    if(x < 0)
    {
		cout << ESC << "[" << -x << "D";
    }
    else
    {
		cout << ESC << "[" << x << "C";
    }
	
}


int get_keyboard_input(void)
{
	u8 k = read_key();
	u8 QUITFLAG = 0;
	input1 = 0; // FIXME 
	if (k >= 128)
   {
	   unsigned char kk = k - 128;
	   if (kk == KB_UP)
	   {
			input1 &= ~(0xf);
	   }
	   else if (kk == KB_DOWN)
	   {
		 	input1 &= ~(0xf);
	   }
	   else if (kk == KB_RIGHT)
	   {
			input1 &= ~(0xf);
	   }
	   else if (kk == KB_LEFT)
	   {
			input1 &= ~(0xf);
	   }
	   else if (kk == KB_Z)
	   {
		 	input1 &= ~(0xf0);
	   }
	   else if (kk == KB_X)
	   {
		 	input1 &= ~(0xf0);
	   }
	   
   }
   else

   {
	   	if (k == KB_UP)
	   	{
		 	input1 |= BUTTON_UP;
	    }
	    else if (k == KB_DOWN)
	    {
			input1 |= BUTTON_DOWN;
	    }
	    else if (k == KB_LEFT)
	    {
			input1 |= BUTTON_LEFT;
	    }
	    else if (k == KB_RIGHT)
	    {
			input1 |= BUTTON_RIGHT;
	    }
	    else if (k == KB_Z)
	    {
			
		    input1 |= BUTTON_A;
	   	}
	   	else if (k == KB_X)
	   	{
			input1 |= BUTTON_B;
	   	}
	   	else if (k == KB_ESC)
	   	{
		  	QUITFLAG = 1;
       	}
	   
   }

   return k;
}



void main(int argc, char* argv[])
{
	u16 rambase;
	s16 i;
	u8 st, ste;

	asm mov ax,es
	asm mov [rambase], ax

	// Initialize rooms 
	for(u8 r = 0; r < 17; r++)
	{
		rooms[r].roomName = &roomNames[r];
		rooms[r].entryDesc = &roomDescriptions[r];
		rooms[r].searchDesc = &roomSearches[r];
	}
	rooms[1].exit_N = &rooms[2];
	rooms[2].exit_N = &rooms[3];
	rooms[2].exit_S = &rooms[1];
	rooms[3].exit_S = &rooms[2];
	rooms[1].exit_E = &rooms[4];
	rooms[1].exit_S = &rooms[6];
	rooms[4].exit_W = &rooms[1];
	rooms[4].exit_E = &rooms[5];
	rooms[5].exit_W = &rooms[4];
	rooms[6].exit_N = &rooms[1];
	rooms[6].exit_E = &rooms[7];
	rooms[6].exit_S = &rooms[8];
	rooms[7].exit_W = &rooms[6];
	rooms[8].exit_N = &rooms[6];
	rooms[8].exit_E = &rooms[10];
	rooms[8].exit_S = &rooms[12];
	rooms[9].exit_N = &rooms[10];
	rooms[10].exit_W = &rooms[8];
	rooms[10].exit_S = &rooms[9];
	rooms[10].exit_E = &rooms[11];
	rooms[11].exit_W = &rooms[10];
	rooms[12].exit_N = &rooms[8];
	rooms[12].exit_E = &rooms[13];
	rooms[12].exit_S = &rooms[15];
	rooms[13].exit_W = &rooms[12];
	rooms[13].exit_E = &rooms[14];
	rooms[14].exit_W = &rooms[13];
	rooms[15].exit_N = &rooms[12];
	rooms[15].exit_E = &rooms[16];
	rooms[16].exit_W = &rooms[15];



	SetVGASegment();
	//printVarSizes();

	if(argc == 2)
	{
		SB_BASE=0x0;
		for(i = 0; i < sizeof(argv[1]); i++)
		{
			SB_BASE += hex2c(argv[1][i]) * (0x1 << (4*(sizeof(argv[1])-i)));
		}
	}
	if(argc == 1)
		SB_BASE = 0x220;
	//GetChannelType();
/*
	if(ResetDSP() == 0)
		printf("DSP init OK!\n");
	else
	{
		printf("SB DSP init failed. Exiting.\n");
		return;
	}
	PrintDSPVersion();
*/
	// Load OPL general midi instrument bank
	u16 oplsize = file2buf("GMOPL.IBK", ibk);
	printf("Loaded OPL bank of size %d.\n", oplsize);
	FM_AdlibReset();
	for(u8 j = 1; j <= 0xf5; j++)
	{
		FM_RegSelect(j);
		FM_RegWrite(0);
	}

	// Test EGA character
	imgdata[0] = 0x0;
	imgdata[1] = 0xff;
	imgdata[2] = 0;
	imgdata[3] = 255;
	u8* imgloc = &imgdata[0];

	SetVideoMode(0xe);

	// for bitmaps, we need STOSB.
	// stores AL at [ES:DI], inc d
// TEST
	FM_SetInstrument(62);

	FM_RegSelect(0xA0); //ch0 f num low
	FM_RegWrite(0x98);
	FM_RegSelect(0xB0); // ch0 key, f num hi
	FM_RegWrite(0x31);
	// off first
	//if(CLK_TCK < fps){
	//	fps = CLK_TCK;
	//	frameskip = 0;
	//
	fps = 255;
	//clock_t start = clock();
	//clock_t end = 0;
	s16 px,py;
	px = 40;
	/*
	// Gets values from HZTOTAL and VRTOTAL as reported by crtc 
	u8 result_h;
	u16 result_v;
	u8 ovfl;
	asm mov dx, CRTC_REG 
	asm mov ax, HZTOTAL_REG 
	asm out dx, al
	asm inc dx 
	asm in al, dx 
	asm mov [result_h], al
	asm mov dx, CRTC_REG 
	asm mov ax, 6 
	asm out dx, al
	asm inc dx 
	asm in al, dx
	asm mov ah,0
	asm mov [result_v], ax
	asm mov dx, CRTC_REG 
	asm mov ax, 7 
	asm out dx, al
	asm inc dx 
	asm in al, dx 
	asm mov [ovfl], al

	if(ovfl & BIT(5)) result_v |= BIT(8);
	if(ovfl & BIT(0)) result_v |= BIT(9);
	*/

	// TITLE SCREEN
	//printf("%s[7m", ESC);
	reset();
	cout << flush;
	movecursor(35, 8);
	printf("DARK SKY");
	movecursor(-12, 5);
	printf("Press RETURN to start\n\n\n\n\n");
	getchar();
	FM_RegSelect(0xb0);
	FM_RegWrite(0xc0);
	//cls();
	
	movecursor(0, 4);
	printf("%s", introtext1);
	printf("\n\n(Press return to continue)\n");
	getchar();
	
	printf("%s", introtext2);
	printf("\n\n(Press return to continue)\n");
	getchar();

	printf("%s", instr);
	printf("\n\n(Press return to begin your adventure!)\n");
	getchar();

	printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

	ROOM* currentRoom;
	u8 turnsLeft = 15;
	currentRoom = &rooms[1];
	int waitInput = 0;
	u8 powerOff = 0;
	u8 medicineFound = 0;
	while(1)
	{
		WaitRetrace();
		/*
		* !!!!!!! MAIN !!!!!!!
		*/
		int ink;
		framecounter++;
		if(framecounter > 59) framecounter = 0;
		if(waitInput > 0) {
			waitInput--;
			ink = 0;
		}
		else
			ink = get_keyboard_input();


		if((medicineFound == 1) && (currentRoom == &rooms[1]))
		{
			printf("CONGRATULATIONS!\n\n\n\n\n");
			printf("You give your sister her much-needed medicine just in time.");
			printf("Hand-in-hand, you head off to find a safe new home.\n\n\n");
			printf("               THE END  ");
			while(ink != 0x1c){ ink = get_keyboard_input(); }
			goto _globalquit;
		}
		//printf("%c[%dD%c[%dA", 0x1b, 80, 0x1b, 25);
		//movecursor(0, 11);
		//cout << flush;
		//printf("Hscan: %d\n", result_h);
		//printf("Vscan: %d\n", result_v);

		if(ink == 1)
			goto _globalquit;
		//printf("Input: ");
		//for(s8 i = 7; i >= 0; i--)
		//{
		//	if(input1 & (1 << i)) printf("1");
		//	else printf("0");
		//}
		//printf("\nFPS: %d",fps);
		
		printf("\x1b[H%s [%d turns left]\n\n%s\n\n", *currentRoom->roomName, turnsLeft, *currentRoom->entryDesc);
		printf("\n\nWhat will you do?\n  M)ove, or S)earch? ");
		if(ink == 0x32){ // m
			printf("MOVE");
			printf("\n");
			printf("Exits:\n");
			if(currentRoom->exit_N != 0) printf(" N)orth\n");
			if(currentRoom->exit_S != 0) printf(" S)outh\n");
			if(currentRoom->exit_E != 0) printf(" E)ast\n");
			if(currentRoom->exit_W != 0) printf(" W)est\n");
			printf("Which direction? ");
			int d = get_keyboard_input();
			while( (d!=0x1f) && (d!=0x31) && (d!=0x11) && (d!=0x12) )
			{
				d = get_keyboard_input();
			} 
			if( (d == 0x1f) && (currentRoom->exit_S != 0) ){
				currentRoom = (ROOM*)currentRoom->exit_S;
				turnsLeft--;
				d = 0;
				ink = 0;
				waitInput = 30;
			}
			else if((d == 0x31)&& (currentRoom->exit_N != 0) ){
				currentRoom = (ROOM*)currentRoom->exit_N;
				turnsLeft--;
			}
			else if ((d == 0x11)&& (currentRoom->exit_W != 0) ){
				currentRoom = (ROOM*)currentRoom->exit_W;
				turnsLeft--;
			}
			else if ((d == 0x12)&& (currentRoom->exit_E != 0) ){
				currentRoom = (ROOM*)currentRoom->exit_E;
				turnsLeft--;
			}
			for(u8 p = 0; p < 25; p++) printf("\n");
			if(turnsLeft == 0)
				goto _globalGameOver;
		}
		else if (ink == 0x1F){ // s 
			ink = 0;
			printf("SEARCH");
			printf("\n");
			printf("%s", *currentRoom->searchDesc);
			int d = get_keyboard_input();
			printf("\n\n(Press return)");
			
			while(d != 0x1c){ d = get_keyboard_input(); }
			
			if( (currentRoom == &rooms[3])\
				|| (currentRoom == &rooms[5])\
				|| (currentRoom == &rooms[7])\
				|| (currentRoom == &rooms[14]))
			{
				if(currentRoom->searchDesc != &room_searched)
					turnsLeft += 3;
			}
			if(currentRoom == &rooms[15])
			{
				goto _globalquit;
			}
			if(currentRoom == &rooms[11])
			{
				powerOff = 1;
				rooms[15].entryDesc = &room15_desc2;
			}
			if(currentRoom == &rooms[16])
			{
				medicineFound = 1;
			}
			currentRoom->searchDesc = &room_searched;
			//getchar();
			for(u8 p = 0; p < 25; p++) printf("\n");
		}
		else 
			printf("       ");
		//char inchar = getchar();

		if((input1 & BUTTON_RIGHT))
		{

		}
		if((input1 & BUTTON_LEFT))
		{

		}
		
		WaitVBlank();
		/* 
		* !!!!!!! DRAW !!!!!
		*/
		/*

		SetVGASegment();
		SetVGABitmask(0xff);  //REset all bits
		SetVGAPlaneMask(0xf); // of all colors

		asm mov di, [pos]
		asm mov cx, 8  // 8 loops
		asm mov si, 80 // +1 Y pixel = +80 bytes
		_meloop:
		asm {
			mov ah,[es:di]
			mov al,0h
			mov [es:di],al
			add di,si
			loop _meloop
		} // 170 = 0b10101010
		if(px > 79) px = 79;
		if(px < 0) px = 0;
		
		//SetVGASegment();
		SetVGABitmask(0xff); // SET bits of
		SetVGAPlaneMask(LIGHTMAGENTA); // magenta planes
		
		pos = (80*100) + px;

		asm mov di, [pos]
		asm mov cx, 8  // 8 loops
		asm mov si, 80 // +1 Y pixel = +80 bytes
		_meloop2:
		asm {
			mov ah,[es:di]
			mov al,170
			mov [es:di],al
			add di,si
			loop _meloop2
		} // 170 = 0b10101010
		*/
		//start = clock();	
	}
_globalGameOver:
	printf("\x1b[H\n\n\n\n    You have starved to death...\n\n       GAME    OVER \n\n\n\n");
	while(d != 0x1c){ d = get_keyboard_input(); }
_globalquit:
	asm mov es,[rambase]
	SetVideoMode(3);
	// return;
}

/*
   Channel        1   2   3   4   5   6   7   8   9
   Operator 1    00  01  02  08  09  0A  10  11  12
   Operator 2    03  04  05  0B  0C  0D  13  14  15
*/
	// write mode 1 - not sure what this does
	/*
	asm {
		mov dx,0x3ce
		mov al,5
		out dx,al
		inc dx 
		nop
		nop 
		nop 
		nop 
		in al,dx 
		and al,not 3
		or al,1 
		nop 
		nop 
		nop 
		nop 
		out dx,al 
	}
	*/ 